"""–û—Å–Ω–æ–≤–Ω–æ–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–°.ai."""

import asyncio
import logging
from typing import Any, Sequence, Optional

from mcp.server.models import InitializationOptions
from mcp.server import NotificationOptions, Server
from mcp.types import (
    Resource, 
    Tool, 
    TextContent, 
    ImageContent, 
    EmbeddedResource,
    LoggingLevel
)
import mcp.types as types

from .config import get_config, Config
from .api_client import OneCApiClient
from .models import ApiError, McpToolRequest, McpToolResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å MCP
logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)


class OneCMcpServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–°.ai."""
    
    @staticmethod
    def _sanitize_text(text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not text:
            return text
        
        # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã
        import unicodedata
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º Unicode
        text = unicodedata.normalize('NFKC', text)
        
        # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        cleaned = ''
        for char in text:
            if unicodedata.category(char) not in ['Cc', 'Cf'] or char in ['\n', '\r', '\t']:
                cleaned += char
            
        return cleaned
    
    def __init__(self, config: Optional[Config] = None):
        self.config = config
        self.api_client: Optional[OneCApiClient] = None
        
        # –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä  
        self.server = Server("onec-ai-1c-enterprise")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ MCP."""
        
        @self.server.list_tools()
        async def handle_list_tools() -> list[Tool]:
            """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
            return [
                Tool(
                    name="ask_1c_ai",
                    description="üîç –ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É 1–°.ai (1–°:–ù–∞–ø–∞—Ä–Ω–∏–∫) –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ 1–°, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –æ–±—ä–µ–∫—Ç–∞—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, API, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "question": {
                                "type": "string",
                                "description": "–í–æ–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏ 1–°.ai"
                            },
                            "programming_language": {
                                "type": "string",
                                "description": "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                                "default": ""
                            },
                            "create_new_session": {
                                "type": "boolean",
                                "description": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
                                "default": False
                            }
                        },
                        "required": ["question"]
                    },
                ),
                Tool(
                    name="explain_1c_syntax",
                    description="üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—ã —è–∑—ã–∫–∞ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è HTTP–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, HTTP–ó–∞–ø—Ä–æ—Å, –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π, –ó–∞–ø—Ä–æ—Å, –†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π, –î–æ–∫—É–º–µ–Ω—Ç, –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –î–ª—è –ö–∞–∂–¥–æ–≥–æ, –ï—Å–ª–∏, –ü—Ä–æ—Ü–µ–¥—É—Ä–∞, –§—É–Ω–∫—Ü–∏—è –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 1–°.",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "syntax_element": {
                                "type": "string",
                                "description": "–≠–ª–µ–º–µ–Ω—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç 1–° –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: HTTP–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, HTTP–ó–∞–ø—Ä–æ—Å, –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π, –†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π, –î–æ–∫—É–º–µ–Ω—Ç, –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –ó–∞–ø—Ä–æ—Å, –î–ª—è –ö–∞–∂–¥–æ–≥–æ, –ï—Å–ª–∏, –ü—Ä–æ—Ü–µ–¥—É—Ä–∞, –§—É–Ω–∫—Ü–∏—è)"
                            },
                            "context": {
                                "type": "string",
                                "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                                "default": ""
                            }
                        },
                        "required": ["syntax_element"]
                    },
                ),
                Tool(
                    name="check_1c_code",
                    description="üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –æ—à–∏–±–∫–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ 1–°.",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "–ö–æ–¥ 1–° –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞"
                            },
                            "check_type": {
                                "type": "string",
                                "description": "–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: syntax (—Å–∏–Ω—Ç–∞–∫—Å–∏—Å), logic (–ª–æ–≥–∏–∫–∞), performance (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)",
                                "enum": ["syntax", "logic", "performance"],
                                "default": "syntax"
                            }
                        },
                        "required": ["code"]
                    },
                ),

            ]
        
        @self.server.call_tool()
        async def handle_call_tool(name: str, arguments: dict) -> list[types.TextContent]:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π)
            # print(f"MCP tool call: {name} with args: {arguments}", flush=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ API –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.config is None:
                try:
                    self.config = get_config()
                except Exception as e:
                    return [types.TextContent(
                        type="text",
                        text=f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ONEC_AI_TOKEN"
                    )]
            
            if self.api_client is None:
                try:
                    self.api_client = OneCApiClient(self.config)
                except Exception as e:
                    return [types.TextContent(
                        type="text",
                        text=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"
                    )]
            
            try:
                if name == "ask_1c_ai":
                    return await self._handle_ask_1c_ai(arguments)
                elif name == "explain_1c_syntax":
                    return await self._handle_explain_syntax(arguments)
                elif name == "check_1c_code":
                    return await self._handle_check_code(arguments)
                else:
                    return [types.TextContent(
                        type="text",
                        text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {name}"
                    )]
                    
            except ApiError as e:
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {name}: {e.message}")
                return [types.TextContent(
                    type="text",
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ 1–°.ai: {e.message}"
                )]
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {name}: {str(e)}")
                return [types.TextContent(
                    type="text",
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                )]
    
    async def _handle_ask_1c_ai(self, arguments: dict) -> list[types.TextContent]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ask_1c_ai."""
        question = arguments.get("question", "")
        programming_language = arguments.get("programming_language", "")
        create_new_session = arguments.get("create_new_session", False)
        
        if not question.strip():
            return [types.TextContent(
                type="text",
                text="–û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        conversation_id = await self.api_client.get_or_create_session(
            create_new=create_new_session,
            programming_language=programming_language or None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        answer = await self.api_client.send_message(conversation_id, question)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_answer = self._sanitize_text(answer)
        
        return [types.TextContent(
            type="text",
            text=f"–û—Ç–≤–µ—Ç –æ—Ç 1–°.ai:\n\n{clean_answer}\n\n–°–µ—Å—Å–∏—è: {conversation_id}"
        )]
    
    async def _handle_explain_syntax(self, arguments: dict) -> list[types.TextContent]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ explain_1c_syntax."""
        syntax_element = arguments.get("syntax_element", "")
        context = arguments.get("context", "")
        
        if not syntax_element.strip():
            return [types.TextContent(
                type="text",
                text="–û—à–∏–±–∫–∞: –≠–ª–µ–º–µ–Ω—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏
        question = f"–û–±—ä—è—Å–Ω–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {syntax_element}"
        if context:
            question += f" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        conversation_id = await self.api_client.get_or_create_session()
        answer = await self.api_client.send_message(conversation_id, question)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_answer = self._sanitize_text(answer)
        
        return [types.TextContent(
            type="text",
            text=f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ '{syntax_element}':\n\n{clean_answer}"
        )]
    
    async def _handle_check_code(self, arguments: dict) -> list[types.TextContent]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ check_1c_code."""
        code = arguments.get("code", "")
        check_type = arguments.get("check_type", "syntax")
        
        if not code.strip():
            return [types.TextContent(
                type="text",
                text="–û—à–∏–±–∫–∞: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_descriptions = {
            "syntax": "—Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏",
            "logic": "–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "performance": "–ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        }
        
        check_desc = check_descriptions.get(check_type, "–æ—à–∏–±–∫–∏")
        question = f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥ 1–° –Ω–∞ {check_desc} –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n```1c\n{code}\n```"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        conversation_id = await self.api_client.get_or_create_session()
        answer = await self.api_client.send_message(conversation_id, question)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_answer = self._sanitize_text(answer)
        
        return [types.TextContent(
            type="text",
            text=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ {check_desc}:\n\n{clean_answer}"
        )]
    

    
    async def run(self, transport: str = "stdio"):
        """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞."""
        try:
            # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            if transport == "stdio":
                from mcp.server.stdio import stdio_server
                async with stdio_server() as (read_stream, write_stream):
                    await self.server.run(
                        read_stream,
                        write_stream,
                        InitializationOptions(
                            server_name="MCP_1copilot",
                            server_version="0.1.0",
                            capabilities=self.server.get_capabilities(
                                notification_options=NotificationOptions(),
                                experimental_capabilities={},
                            ),
                        ),
                    )
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            raise
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
            if self.api_client:
                await self.api_client.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        server = OneCMcpServer()
        await server.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise


if __name__ == "__main__":
    asyncio.run(main()) 